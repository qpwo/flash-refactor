#!/usr/bin/env python
"""ask questions about files"""
# pip install google-generativeai python-dotenv

import argparse
from datetime import datetime
import os
import os
from pathlib import Path
import re
import re

import dotenv
from google import genai
from google.genai.types import GenerateContentConfig
from prompt_toolkit import PromptSession
from prompt_toolkit.history import FileHistory
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.keys import Keys
from prompt_toolkit.styles import Style
from termcolor import cprint

dotenv.load_dotenv()  # Load environment variables
client = genai.Client(api_key=os.environ["GEMINI_API_KEY"], http_options={"api_version": "v1alpha"})


def stream_print(response, color) -> str:
    """Helper function to print a streamed response from the model."""
    coll = []
    for chunk in response:
        # print(chunk.text, end="", flush=True)
        cprint(chunk.text, color)
        coll.append(chunk.text or "")
    print()  # Newline after the complete response
    return "".join(coll)


def line_join(*parts: str):
    "puts exactly one newline between each part"
    return "\n".join(line.strip("\n") for line in parts)


def tagged(tag: str, *children: str, **attrs):
    "xml formatting with exact one newline between each part"
    attr_str = ""
    if attrs:
        attr_str = " " + " ".join(f'{k}="{v}"' for k, v in attrs.items())
    return line_join(f"<{tag}{attr_str}>", *children, f"</{tag}>")


def between_tags(tag: str, text: str):
    "extracts text between tags"
    start_tag = f"<{tag}>"
    end_tag = f"</{tag}>"
    start = text.index(start_tag) + len(start_tag)
    end = text.index(end_tag)
    return text[start:end]


parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("include_files", nargs="*", help="One or more file paths to include for question.")


args = parser.parse_args()
print(f"{args=}")

savedir = Path("~/.gemini").expanduser()
savedir.mkdir(exist_ok=True)


def get_timestamp():
    """Returns a timestamp string in the format 'yyyy-mm-dd-hh-mm-ss'."""
    now = datetime.now()
    return now.strftime("%Y-%m-%d-%H-%M-%S")


def multiline_input(p) -> str:
    bindings = KeyBindings()

    @bindings.add(Keys.ControlD)
    def _(event):
        text = event.current_buffer.text
        event.app.exit(result=text)

    style = Style.from_dict(
        {
            # Style for the prompt
            "prompt": "fg:ansimagenta",
            # Style for the input text
            "": "fg:ansired",  # Default style for input
        }
    )

    history_file = os.path.expanduser("~/.flash-history.txt")
    session = PromptSession(
        multiline=True,
        key_bindings=bindings,
        history=FileHistory(history_file),
        style=style,
    )

    try:
        text = session.prompt([("class:prompt", f"{p} (press Ctrl+D to finish or Ctrl+C to exit):\n")], style=style)
    except KeyboardInterrupt:
        print("\nadios\n")
        import sys

        sys.exit(0)
    text = text.strip()
    print("got it")
    print(f"{text=}")

    session.history.store_string(text)
    return text


question = multiline_input("What is your question?")


with open(savedir / "prompt_history.txt", "a") as f:
    f.write(f"---\n{get_timestamp()}\nPrompt:\n{question}\n---\n")

# ------------------------------ GENERATE PLAN --------------------------------

files_section = tagged(
    "included-files",
    *[tagged("file", open(p).read(), name=p) for p in args.include_files],
)

prompt1 = line_join(
    tagged("question", question),
    files_section,
    tagged("question-repeated", question),
)


print("Answering...")
plan_response = stream_print(
    client.models.generate_content_stream(
        contents=prompt1,
        # model="gemini-2.0-flash-thinking-exp-01-21",
        model="gemini-2.0-pro-exp-02-05",
        config=GenerateContentConfig(
            temperature=0.95,
            max_output_tokens=2_000,
            system_instruction="Use the files as context to give a concise and correct answer to the question. Think for a while in <thinking>...</thinking> before giving your <answer>...</answer>.",
        ),
    ),
    "green",
)

print("\n")
